{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Mobility: Facebook Movement Range Maps\n",
    "###########################################################################\n",
    "This section describes how to use the Facebook Movement Range Maps client\n",
    "from Episuite. The main class used to download and parse the Facebook\n",
    "Symptom survey data is the :class:`~episuite.mobility.facebook.FacebookMovementRange`.\n",
    "\n",
    ".. seealso::\n",
    "\n",
    "   `Facebook: Data for good - Movement Range Maps <https://dataforgood.fb.com/tools/movement-range-maps/>`_\n",
    "      Documentation of the Movement Range Maps.\n",
    "\n",
    "   Module :mod:`episuite.mobility.facebook`\n",
    "      Documentation of the :py:mod:`episuite.mobility.facebook` module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "from episuite.mobility import facebook"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load Movement Range Maps data\n",
    "The Episuite API for the Facebook Movement Range Maps allows you to download the entire range maps data or to filter by a single country by using a country code. We will here just download data from Brazil using the `BRA` country code.\n",
    "\n",
    "The movement range maps are increasing in size every day, that's why filtering by your country code is highly recommended. If you specify the `country_code` while calling the `load_movement_range()`, Episuite will filter the dataset without loading it entirely to memory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "client = facebook.FacebookMovementRange()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mrange_data = client.load_movement_range(country_code=\"BRA\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mrange_data.tail(8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Movement Range Maps uses the country codes and geographical data from [GADM](https://gadm.org/). So you will have to download it to be able to plot geographical data. You can also filter by a specific ID or polygon name such as in the example below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "porto_alegre = mrange_data.query(\"polygon_name == 'Porto Alegre'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "porto_alegre = porto_alegre.set_index(\"ds\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "porto_alegre.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plt.figure(figsize=(10, 6))\n",
    "porto_alegre[\"all_day_bing_tiles_visited_relative_change\"].plot()\n",
    "plt.xlabel(\"Date\")\n",
    "plt.ylabel(\"all_day_bing_tiles_visited_relative_change\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see in this case a major reduction of mobility during the early months of the pandemic in Porto Alegre/Rio Grande do Sul/Brazil, followed by a slow rise in mobility with a downward trend after February due to the surge of cases in the city (after new mobility restrictions were deployed by the government)."
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
